name: Install Prometheus and Grafana on EC2

# Trigger on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest  # Use Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI for interacting with AWS services
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2  # Adjust region as needed

      # Step 3: Install SSH client
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      # Step 4: Setup EC2 SSH Key with debugging
      - name: Setup EC2 SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Debug: Check if the key starts correctly
          head -n 1 ~/.ssh/id_rsa
          # Validate the key
          ssh-keygen -y -f ~/.ssh/id_rsa || { echo "SSH key is invalid"; exit 1; }

      # Step 5: Install Prometheus and Grafana on EC2
      - name: Install Prometheus and Grafana on EC2
        run: |
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          SSH_USER=${{ secrets.EC2_SSH_USER }}

          # Install Prometheus
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$EC2_PUBLIC_IP << 'EOF'
            set -x  # Enable debugging
            sudo mkdir -p /etc/prometheus
            sudo mkdir -p /var/lib/prometheus
            curl -LO https://github.com/prometheus/prometheus/releases/download/v2.36.0/prometheus-2.36.0.linux-amd64.tar.gz || { echo "Failed to download Prometheus"; exit 1; }
            tar -xvzf prometheus-2.36.0.linux-amd64.tar.gz || { echo "Failed to extract Prometheus"; exit 1; }
            sudo mv prometheus-2.36.0.linux-amd64/prometheus /usr/local/bin/ || { echo "Failed to move Prometheus"; exit 1; }
            sudo mv prometheus-2.36.0.linux-amd64/promtool /usr/local/bin/ || { echo "Failed to move Promtool"; exit 1; }
            sudo mv prometheus-2.36.0.linux-amd64/consoles /etc/prometheus || { echo "Failed to move consoles"; exit 1; }
            sudo mv prometheus-2.36.0.linux-amd64/console_libraries /etc/prometheus || { echo "Failed to move console libraries"; exit 1; }
            sudo cp prometheus-2.36.0.linux-amd64/prometheus.yml /etc/prometheus || { echo "Failed to copy Prometheus config"; exit 1; }
            sudo rm -rf prometheus-2.36.0.linux-amd64*

            # Create Prometheus service
            sudo bash -c 'cat > /etc/systemd/system/prometheus.service << EOF2
            [Unit]
            Description=Prometheus
            After=network.target

            [Service]
            User=root
            ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus/

            [Install]
            WantedBy=multi-user.target
            EOF2'

            sudo systemctl daemon-reload
            sudo systemctl enable prometheus || { echo "Failed to enable Prometheus service"; exit 1; }
            sudo systemctl start prometheus || { echo "Failed to start Prometheus service"; exit 1; }
            sudo systemctl status prometheus --no-pager
          EOF

          # Install Grafana
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$EC2_PUBLIC_IP << 'EOF'
            set -x  # Enable debugging
            # Add Grafana repository and install it
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
            wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y grafana

            # Start Grafana service
            sudo systemctl daemon-reload
            sudo systemctl enable grafana-server || { echo "Failed to enable Grafana service"; exit 1; }
            sudo systemctl start grafana-server || { echo "Failed to start Grafana service"; exit 1; }
            sudo systemctl status grafana-server --no-pager
          EOF
